name: Release Mobile
on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release-android:
    name: Tag, Build and Release Android APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm -w install --frozen-lockfile --filter ./apps/mobile

      - name: Validate versions
        run: |
          PKG_VERSION=$(node -p "require('./apps/mobile/package.json').version")
          APPJSON_VERSION=$(node -p "require('./apps/mobile/app.json').expo.version")
          echo "Detected versions -> package.json: $PKG_VERSION | app.json: $APPJSON_VERSION"
          if [ "$PKG_VERSION" != "$APPJSON_VERSION" ]; then
            echo "Error: apps/mobile/package.json version ($PKG_VERSION) does not match apps/mobile/app.json expo.version ($APPJSON_VERSION)." >&2
            exit 1
          fi
          echo "version=$PKG_VERSION" >> $GITHUB_OUTPUT
        id: validate

      - name: Create and push tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION=${{ steps.validate.outputs.version }}
          TAG="mobile-v${VERSION}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"
            git tag "$TAG"
            git push origin "$TAG"
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Android
        uses: android-actions/setup-android@v3

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            ${{ runner.os }}-gradle-default

      - name: Cache Expo
        uses: actions/cache@v3
        with:
          path: apps/mobile/.expo
          key: ${{ runner.os }}-expo-${{ hashFiles('**/app.json') }}
          restore-keys: |
            ${{ runner.os }}-expo-
            ${{ runner.os }}-expo-default

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android APK
        id: build
        working-directory: apps/mobile
        run: |
          VERSION=$(node -p "require('./package.json').version")
          APK_NAME=commit-android-${VERSION}.apk
          npx eas-cli build --platform android \
            --profile production \
            --local --non-interactive \
            --output "../${APK_NAME}"
          echo "apk=apps/${APK_NAME}" >> $GITHUB_OUTPUT
          echo "apk_name=${APK_NAME}" >> $GITHUB_OUTPUT

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: expo-apk
          path: ${{ steps.build.outputs.apk }}

      - name: Create/Update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          prerelease: false
          draft: false
          tag: mobile-v${{ steps.validate.outputs.version }}
          artifacts: ${{ steps.build.outputs.apk }}
          artifactErrorsFailBuild: true
