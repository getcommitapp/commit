@startuml db-schema
title commit. - Database Schema
!theme plain
'!pragma layout elk
left to right direction
hide circle
hide methods
hide stereotypes
skinparam linetype ortho
skinparam nodesep 90
skinparam ranksep 150
skinparam class {
  BackgroundColor White
  BorderColor Black
}

' SQLite must
entity "User" as user {
  + id: text [pk]
  --
  name: text
  email: text [unique]
  emailVerified: boolean
  image: text
  role: text ' (user, reviewer, admin)
  stripeCustomerId: text
  timezone: text [default: UTC]
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' SQlite must
entity "Session" as session {
  + id: text [pk]
  --
  expiresAt: integer [timestamp]
  token: text [unique]
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
  ipAddress: text
  userAgent: text
  userId: text [fk -> user.id]
}

' SQLite must
entity "Account" as account {
  + id: text [pk]
  --
  accountId: text
  providerId: text
  userId: text [fk -> user.id]
  accessToken: text
  refreshToken: text
  idToken: text
  accessTokenExpiresAt: integer [timestamp]
  refreshTokenExpiresAt: integer [timestamp]
  scope: text
  password: text
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' SQLite must
entity "Verification" as verification {
  + id: text [pk]
  --
  identifier: text
  value: text
  expiresAt: integer [timestamp]
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Destinations
entity "Charity" as charity {
  + id: text [pk]
  --
  name: text
  url: text
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Base goal
entity "Goal" as goal {
  + id: text [pk]
  --
  ownerId: text [fk -> user.id]
  name: text
  description: text
  startDate: integer [timestamp]
  endDate: integer [timestamp]
  dueStartTime: integer [timestamp]
  dueEndTime: integer [timestamp]
  localDueStart: text ' HH:mm
  localDueEnd: text ' HH:mm
  recDaysMask: integer ' bitmask for weekdays
  stakeCents: int
  currency: text
  destinationType: text
  destinationUserId: text [fk -> user.id] ' (nullable)
  destinationCharityId: text [fk -> charity.id] ' (nullable)
  method: text ' (location, photo, checkin, movement)
  graceTimeSeconds: integer
  durationSeconds: integer
  geoLat: real
  geoLng: real
  geoRadiusM: integer
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Goal occurrence tracking - replaces Goal_verifications_log
entity "Goal_occurrence" as goal_occurrence {
  + goalId: text [pk, fk -> goal.id]
  + userId: text [pk, fk -> user.id]
  + occurrenceDate: text [pk] ' YYYY-MM-DD
  --
  status: text [default: pending] ' (pending, approved, rejected)
  verifiedAt: integer [timestamp]
  photoUrl: text
  timerStartedAt: integer [timestamp]
  timerEndedAt: integer [timestamp]
  violated: boolean
  approvedBy: text [fk -> user.id] ' (nullable)
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Group challenges
entity "Group" as group {
  + id: text [pk]
  --
  creatorId: text [fk -> user.id]
  goalId: text [fk -> goal.id]
  name: text
  description: text
  inviteCode: text [unique]
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

entity "Group_member" as group_member {
  + groupId: text [pk, fk -> group.id]
  + userId: text [pk, fk -> user.id]
  --
  joinedAt: integer [timestamp]
  status: text
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Relationships
user ||--o{ goal : owns
user ||--o{ goal_occurrence : participates
user ||--o{ goal_occurrence : approves
user ||--o{ group : creates
user ||--o{ group_member : joins
user ||--o{ session : has
user ||--o{ account : linked

charity ||--o{ goal : destination

goal ||--o{ goal_occurrence : tracks
goal ||--o{ group : spawns

group ||--o{ group_member : has

note right of goal_occurrence
approvedBy -> user.id
Only reviewer or admin roles can approve
Composite primary key: (goalId, userId, occurrenceDate)
end note

note right of goal
Verification methods are flattened into Goal table
instead of separate Goal_verifications_method table
end note

@enduml
