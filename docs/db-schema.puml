@startuml db-schema
title commit. - Database Schema
!theme plain
'!pragma layout elk
left to right direction
hide circle
hide methods
hide stereotypes
skinparam linetype ortho
skinparam nodesep 90
skinparam ranksep 150
skinparam class {
  BackgroundColor White
  BorderColor Black
}

' SQLite must
entity "User" as user {
  + id: text [pk]
  --
  name: text
  email: text [unique]
  emailVerified: boolean
  image: text
  role: text ' (user, admin, reviewer)
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' SQlite must
entity "Session" as session {
  + id: text [pk]
  --
  expiresAt: integer [timestamp]
  token: text [unique]
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
  ipAddress: text
  userAgent: text
  userId: text [fk -> user.id]
}

' SQLite must
entity "Account" as account {
  + id: text [pk]
  --
  accountId: text
  providerId: text
  userId: text [fk -> user.id]
  accessToken: text
  refreshToken: text
  idToken: text
  accessTokenExpiresAt: integer [timestamp]
  refreshTokenExpiresAt: integer [timestamp]
  scope: text
  password: text
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' SQLite must
entity "Verification" as verification {
  + id: text [pk]
  --
  identifier: text
  value: text
  expiresAt: integer [timestamp]
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Destinations
entity "Charity" as charity {
  + id: text [pk]
  --
  name: text
  url: text
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Base goal
entity "Goal" as goal {
  + id: text [pk]
  --
  ownerId: text [fk -> user.id]
  name: text
  description: text
  startDate: integer [timestamp]
  endDate: integer [timestamp]
  dueStartTime: integer [timestamp]
  dueEndTime: integer [timestamp]
  recurrence: text
  stakeCents: int
  currency: text
  destinationType: text
  destinationUserId: text [fk -> user.id] ' (nullable)
  destinationCharityId: text [fk -> charity.id] ' (nullable)
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Evidence Method
entity "Goal_verifications_method" as goal_verifications_method {
  + id: text [pk]
  --
  goalId: text [fk -> goal.id]
  method: text
  latitude: real
  longitude: real
  radiusM: int
  durationSeconds: int
  graceTime: integer [timestamp]
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Evidence Log
entity "Goal_verifications_log" as goal_verifications_log {
  + id: text [pk]
  --
  goalId: text [fk -> goal.id]
  userId: text [fk -> user.id]
  type: text
  verifiedAt: integer [timestamp]
  approvalStatus: text
  approvedBy: text [fk -> user.id] ' (nullable)
  startTime: integer [timestamp]
  photoUrl: text
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Group challenges
entity "Group" as group {
  + id: text [pk]
  --
  creatorId: text [fk -> user.id]
  goalId: text [fk -> goal.id] ' (nullable)
  name: text
  description: text
  inviteCode: text [unique]
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

entity "Group_participants" as group_participants {
  + groupId: text [fk -> group.id]
  + userId: text [fk -> user.id]
  --
  joinedAt: integer [timestamp]
  status: text
  createdAt: integer [timestamp]
  updatedAt: integer [timestamp]
}

' Relationships
user ||--o{ goal : owns
user ||--o{ goal_verifications_log : submits
user ||--o{ goal_verifications_log : approves
user ||--o{ group : creates
user ||--o{ group_participants : participates
user ||--o{ session : has
user ||--o{ account : linked

charity ||--o{ goal : destination

goal ||--o{ goal_verifications_method : has
goal ||--o{ goal_verifications_log : rules
goal ||--o{ group : spawns

group ||--o{ group_participants : has

note right of goal_verifications_log
approvedBy -> user.id
Only admin or reviewer roles can approve
(logical integrity constraint; in SQLite use a trigger)
end note

@enduml
