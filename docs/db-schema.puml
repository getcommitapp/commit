@startuml db-schema
title commit. - Database Schema
' Database schema draft for commit. (MVP)
' Derived from SRS and current mobile code (Supabase auth only)

!theme plain
!pragma layout elk
left to right direction
hide circle
hide methods
hide stereotypes
skinparam linetype ortho
skinparam nodesep 90
skinparam ranksep 150
skinparam class {
  BackgroundColor White
  BorderColor Black
}

' Core auth/profile
entity "profiles" as profiles {
  + id: uuid [pk]  ' references auth.users.id
  --
  display_name: text
  avatar_url: text
  role: text  ' user | reviewer | admin
  created_at: timestamptz
}

' Destinations
entity "charities" as charities {
  + id: uuid [pk]
  --
  name: text
  url: text
  created_at: timestamptz
}

' Solo goals
entity "goals" as goals {
  + id: uuid [pk]
  --
  owner_id: uuid [fk -> profiles.id]
  name: text
  description: text
  goal_type: text  ' preset key or custom
  preset_id: uuid  ' fk -> verification_presets.id (nullable)
  start_at: timestamptz
  due_at: timestamptz
  recurrence: jsonb  ' optional MVP encoding of days, end date
  verification_window_min: int  ' default window; rules can override
  stake_cents: int
  currency: text  ' CHF
  destination_type: text  ' user | charity | platform
  destination_user_id: uuid  ' fk -> profiles.id (nullable)
  destination_charity_id: uuid  ' fk -> charities.id (nullable)
  status: text  ' scheduled | completed | failed | cancelled
  created_at: timestamptz
}

' Evidence / manual review
entity "goal_verifications" as goal_verifications {
  + id: uuid [pk]
  --
  goal_id: uuid [fk -> goals.id]
  user_id: uuid [fk -> profiles.id]
  method: text  ' location | phone_movement | photo
  verified_at: timestamptz
  photo_url: text  ' nullable
  latitude: numeric  ' nullable
  longitude: numeric  ' nullable
  radius_m: int  ' nullable (geofence)
  duration_seconds: int  ' nullable (focus)
  approval_status: text  ' pending | approved | rejected
  approved_by: uuid  ' fk -> profiles.id (reviewer, nullable)
}

' Group challenges
entity "groups" as groups {
  + id: uuid [pk]
  --
  creator_id: uuid [fk -> profiles.id]
  goal_id: uuid  ' fk -> goals.id (nullable) â€” group based on a goal
  name: text
  description: text
  stake_cents: int
  currency: text
  destination_type: text  ' user | charity | platform
  destination_user_id: uuid  ' fk -> profiles.id (nullable)
  destination_charity_id: uuid  ' fk -> charities.id (nullable)
  status: text  ' scheduled | resolved | cancelled
  created_at: timestamptz
}

' Verification presets (e.g., wake_up, no_phone)
entity "verification_presets" as verification_presets {
  + id: uuid [pk]
  --
  key: text  ' wake_up | no_phone
  name: text
  description: text
  created_at: timestamptz
}

entity "verification_preset_rules" as verification_preset_rules {
  + id: uuid [pk]
  --
  preset_id: uuid [fk -> verification_presets.id]
  method: text  ' location | phone_movement | photo
  params: jsonb  ' method-specific config (e.g., geofence, thresholds)
}

' Per-goal rule set (composable methods + constraints)
entity "goal_verification_rules" as goal_verification_rules {
  + id: uuid [pk]
  --
  goal_id: uuid [fk -> goals.id]
  method: text  ' location | phone_movement | photo
  require_time_window: boolean
  time_window_minutes: int  ' optional override of goal default
  require_duration: boolean
  min_duration_seconds: int  ' for continuous focus/no-phone
  ' Location-specific fields (nullable unless method = location)
  latitude: numeric
  longitude: numeric
  radius_m: int
  params: jsonb  ' additional method-specific parameters
}

' Per-group rule set (same structure as goals)

entity "group_participants" as group_participants {
  + group_id: uuid [fk -> groups.id]
  + user_id: uuid [fk -> profiles.id]
  --
  joined_at: timestamptz
  status: text  ' invited | joined | left
}

entity "group_results" as group_results {
  + id: uuid [pk]
  --
  group_id: uuid [fk -> groups.id]
  user_id: uuid [fk -> profiles.id]
  outcome: text  ' success | failure
  captured_cents: int  ' stake captured from this user (0 if success)
}

entity "group_invites" as group_invites {
  + id: uuid [pk]
  --
  group_id: uuid [fk -> groups.id]
  inviter_id: uuid [fk -> profiles.id]
  invite_code: text
  expires_at: timestamptz
  accepted_by: uuid  ' fk -> profiles.id (nullable)
  accepted_at: timestamptz  ' nullable
}

' Payments / captures (Stripe)
entity "payments" as payments {
  + id: uuid [pk]
  --
  user_id: uuid [fk -> profiles.id]
  goal_id: uuid  ' fk -> goals.id (nullable)
  group_id: uuid  ' fk -> groups.id (nullable)
  amount_cents: int
  currency: text
  status: text  ' authorized | captured | voided | refunded
  stripe_payment_intent_id: text
  created_at: timestamptz
  captured_at: timestamptz  ' nullable
}

' Relationships
profiles ||--o{ goals : owns
profiles ||--o{ goal_verifications : submits
profiles ||--o{ groups : creates
profiles ||--o{ group_participants : participates
profiles ||--o{ group_invites : invites
profiles ||--o{ payments : pays

charities ||--o{ goals : destination
charities ||--o{ groups : destination

goals ||--o{ goal_verifications : has
goals ||--o{ goal_verification_rules : rules

groups ||--o{ group_participants : has
groups ||--o{ group_results : results

' Group derived from a specific goal
goals ||--o{ groups : spawns

verification_presets ||--o{ verification_preset_rules : defines
verification_presets ||--o{ goals : used_by
verification_presets ||--o{ groups : used_by

' Payments associations (optional FKs)
goals ||--o{ payments : settlement
groups ||--o{ payments : settlement

@enduml
